{
  "version": 3,
  "sources": ["../src/waterkotteheatpump.ts"],
  "sourcesContent": ["import { getServicesStates, getStates } from './states';\r\nimport { AdapterError, CommonState, ILogProvider, IndicatorState, Login, TagResponse, WaterkotteError } from './types';\r\nimport { WaterkotteCgi } from './waterkottecgi';\r\n\r\nexport class WaterkotteHeatPump {\r\n    api: WaterkotteCgi;\r\n    login?: Login;\r\n    tags: CommonState[] = [];\r\n\r\n    constructor(\r\n        ipAddress: string,\r\n        private username: string,\r\n        private password: string,\r\n        private log: ILogProvider,\r\n    ) {\r\n        this.api = new WaterkotteCgi(ipAddress, log);\r\n    }\r\n\r\n    async connectAsync(): Promise<boolean | Error> {\r\n        try {\r\n            this.login = await this.api.loginAsync(this.username, this.password);\r\n            return true;\r\n        } catch (e: unknown) {\r\n            if (e instanceof Error) {\r\n                return e;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async disconnectAsync(): Promise<boolean | Error> {\r\n        try {\r\n            await this.api.logoutAsync();\r\n            return true;\r\n        } catch (e: unknown) {\r\n            if (e instanceof Error) {\r\n                return e;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async requestTagsAsync(): Promise<TagResponse[]> {\r\n        try {\r\n            if (!this.login) {\r\n                const loginResult = await this.connectAsync();\r\n                if (typeof loginResult == 'boolean') {\r\n                    if (loginResult) {\r\n                        this.log.debug('Successfully (re-)logged in');\r\n                        return await this.requestTagsAsync();\r\n                    } else {\r\n                        this.log.error('Unhandled result when logging in');\r\n                        return [];\r\n                    }\r\n                } else {\r\n                    throw loginResult;\r\n                }\r\n            }\r\n\r\n            if (this.tags.length == 0) {\r\n                this.tags = await this.getTagsToRequest();\r\n            }\r\n\r\n            const tagResponses = await this.api.getTagsAsync(this.tags, this.login);\r\n            return tagResponses;\r\n        } catch (e: unknown) {\r\n            if (e instanceof WaterkotteError) {\r\n                switch (e.code) {\r\n                    case WaterkotteError.LOGIN_REQUIRED:\r\n                        this.login = undefined;\r\n                        return await this.requestTagsAsync();\r\n                    case WaterkotteError.TOO_MANY_USERS:\r\n                        this.login = undefined;\r\n                        this.log.warn(`Too many users, skip this request`);\r\n                        return [];\r\n                }\r\n            }\r\n\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getTagsToRequest(): Promise<CommonState[]> {\r\n        if (!this.login) {\r\n            throw new AdapterError('getTagsToRequest: Not logged in');\r\n        }\r\n\r\n        const response = await this.api.getTagsAsync(getServicesStates(), this.login);\r\n        const activeServices = response\r\n            .filter(\r\n                (x) =>\r\n                    x instanceof TagResponse &&\r\n                    x.state instanceof IndicatorState &&\r\n                    x.state.normalizeValue(x.response.value) === true,\r\n            )\r\n            .map((x) => {\r\n                this.log.debug(`Active service: ${JSON.stringify(x.state.Text)}`);\r\n                return x.state.Id;\r\n            });\r\n        const states = getStates(activeServices);\r\n\r\n        return states;\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6C;AAC7C,mBAA6G;AAC7G,2BAA8B;AAEvB,MAAM,mBAAmB;AAAA,EAK5B,YACI,WACQ,UACA,UACA,KACV;AAHU;AACA;AACA;AAER,SAAK,MAAM,IAAI,mCAAc,WAAW,GAAG;AAAA,EAC/C;AAAA,EAXA;AAAA,EACA;AAAA,EACA,OAAsB,CAAC;AAAA,EAWvB,MAAM,eAAyC;AAC3C,QAAI;AACA,WAAK,QAAQ,MAAM,KAAK,IAAI,WAAW,KAAK,UAAU,KAAK,QAAQ;AACnE,aAAO;AAAA,IACX,SAAS,GAAP;AACE,UAAI,aAAa,OAAO;AACpB,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,kBAA4C;AAC9C,QAAI;AACA,YAAM,KAAK,IAAI,YAAY;AAC3B,aAAO;AAAA,IACX,SAAS,GAAP;AACE,UAAI,aAAa,OAAO;AACpB,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,mBAA2C;AAC7C,QAAI;AACA,UAAI,CAAC,KAAK,OAAO;AACb,cAAM,cAAc,MAAM,KAAK,aAAa;AAC5C,YAAI,OAAO,eAAe,WAAW;AACjC,cAAI,aAAa;AACb,iBAAK,IAAI,MAAM,6BAA6B;AAC5C,mBAAO,MAAM,KAAK,iBAAiB;AAAA,UACvC,OAAO;AACH,iBAAK,IAAI,MAAM,kCAAkC;AACjD,mBAAO,CAAC;AAAA,UACZ;AAAA,QACJ,OAAO;AACH,gBAAM;AAAA,QACV;AAAA,MACJ;AAEA,UAAI,KAAK,KAAK,UAAU,GAAG;AACvB,aAAK,OAAO,MAAM,KAAK,iBAAiB;AAAA,MAC5C;AAEA,YAAM,eAAe,MAAM,KAAK,IAAI,aAAa,KAAK,MAAM,KAAK,KAAK;AACtE,aAAO;AAAA,IACX,SAAS,GAAP;AACE,UAAI,aAAa,8BAAiB;AAC9B,gBAAQ,EAAE,MAAM;AAAA,UACZ,KAAK,6BAAgB;AACjB,iBAAK,QAAQ;AACb,mBAAO,MAAM,KAAK,iBAAiB;AAAA,UACvC,KAAK,6BAAgB;AACjB,iBAAK,QAAQ;AACb,iBAAK,IAAI,KAAK,mCAAmC;AACjD,mBAAO,CAAC;AAAA,QAChB;AAAA,MACJ;AAEA,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAc,mBAA2C;AACrD,QAAI,CAAC,KAAK,OAAO;AACb,YAAM,IAAI,0BAAa,iCAAiC;AAAA,IAC5D;AAEA,UAAM,WAAW,MAAM,KAAK,IAAI,iBAAa,iCAAkB,GAAG,KAAK,KAAK;AAC5E,UAAM,iBAAiB,SAClB;AAAA,MACG,CAAC,MACG,aAAa,4BACb,EAAE,iBAAiB,+BACnB,EAAE,MAAM,eAAe,EAAE,SAAS,KAAK,MAAM;AAAA,IACrD,EACC,IAAI,CAAC,MAAM;AACR,WAAK,IAAI,MAAM,mBAAmB,KAAK,UAAU,EAAE,MAAM,IAAI,GAAG;AAChE,aAAO,EAAE,MAAM;AAAA,IACnB,CAAC;AACL,UAAM,aAAS,yBAAU,cAAc;AAEvC,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
