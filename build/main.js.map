{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { getStates } from './states';\nimport { CommonState, Login, TagResponse, WaterkotteError } from './types';\nimport { WaterkotteCgi } from './waterkotte';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass WaterkotteEasycon extends utils.Adapter {\n    states: CommonState[] = [];\n    api: WaterkotteCgi | undefined;\n    updateParametersInterval: ioBroker.Interval | undefined;\n    login: Login = <Login>{};\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'waterkotte-easycon',\n        });\n        this.on('ready', this.onReady.bind(this));\n        //this.on('stateChange', this.onStateChange.bind(this));\n        //this.on('objectChange', this.onObjectChange.bind(this));\n        //this.on('message', this.onMessage.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.setStateAsync('info.connection', false, true);\n\n        this.api = new WaterkotteCgi(this.config.ipAddress, this.log);\n\n        try {\n            this.login = await this.api.loginAsync(this.config.username, this.config.password);\n            await this.setStateAsync('info.connection', true, true);\n            await this.setErrorAsync('');\n        } catch (e: unknown) {\n            let message = String(e);\n            if (e instanceof WaterkotteError) {\n                message = `${e.code} - ${e.message}`;\n            }\n\n            this.log.error(message);\n            await this.setErrorAsync(message);\n            return;\n        }\n\n        this.states = getStates(\n            this.config.pollStatesOf ?? ['Heizen', 'K\u00FChlen', 'Wasser', 'Energiebilanz', 'Messwerte', 'Status'],\n        );\n\n        await this.updateParametersAsync(this.states);\n        const interval = this.setInterval(\n            async (states) => await this.updateParametersAsync(states as CommonState[]),\n            this.config.pollingInterval,\n            this.states,\n        );\n\n        if (interval) {\n            this.updateParametersInterval = interval;\n        }\n    }\n\n    private async updateParametersAsync(states: CommonState[]): Promise<void> {\n        if (!this.api) {\n            throw new Error('Unable to update parameters because api has not been initialized');\n        }\n\n        try {\n            const tagResponses = await this.api.getTagsAsync(states, this.login);\n\n            for (const tagResponse of tagResponses) {\n                if (tagResponse.response.status != TagResponse.STATUS_OK) {\n                    this.log.warn(\n                        `Unable to get parameter '${tagResponse.response.name}'. Received '${tagResponse.response.status}' instead.`,\n                    );\n                    continue;\n                }\n\n                if (!tagResponse.state) {\n                    continue;\n                }\n\n                const id = tagResponse.state.getStateId();\n                await this.extendObjectAsync(id, {\n                    type: 'state',\n                    common: tagResponse.state.getCommonObject(),\n                    native: {},\n                });\n\n                await this.setStateAsync(id, tagResponse.state.normalizeValue(tagResponse.response.value), true);\n            }\n        } catch (e: unknown) {\n            let message: string = 'unknown';\n            if (e instanceof WaterkotteError) {\n                message = `Received unknown error from heat pump: ${e.code} - ${e.message}`;\n            } else if (typeof e === 'string') {\n                message = e;\n            } else if (e instanceof Error) {\n                message = e.message;\n            }\n            this.log.warn(`Error during update: '${message}'`);\n            await this.setErrorAsync(message);\n        }\n    }\n\n    private async setErrorAsync(message: string): Promise<void> {\n        await this.extendObjectAsync('info.lastError', {\n            type: 'state',\n            common: {\n                write: false,\n                type: 'string',\n            },\n            native: {},\n        });\n        await this.setStateAsync('info.lastError', message, true);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            clearInterval(this.updateParametersInterval);\n            try {\n                this.api?.logoutAsync().then().finally();\n            } catch {} // fire and forget\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WaterkotteEasycon(options);\n} else {\n    // otherwise start the instance directly\n    (() => new WaterkotteEasycon())();\n}\n"],
  "mappings": "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",
  "names": []
}
