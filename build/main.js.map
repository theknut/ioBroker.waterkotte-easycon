{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.1\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport { AdapterError, RethrowError, TagResponse, WaterkotteError } from './types';\r\nimport { WaterkotteHeatPump } from './waterkotteheatpump';\r\n\r\nclass WaterkotteEasycon extends utils.Adapter {\r\n    api: WaterkotteHeatPump | undefined;\r\n    updateParametersInterval: ioBroker.Interval | undefined;\r\n    knownObjects: Record<string, any> = {};\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'waterkotte-easycon',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        this.setStateAsync('info.connection', false, true);\r\n\r\n        if (!(await this.updateAndHandleConfigAsync())) {\r\n            return;\r\n        }\r\n\r\n        this.api = new WaterkotteHeatPump(this.config.ipAddress, this.config.username, this.config.password, this.log);\r\n\r\n        try {\r\n            const response = await this.updateParametersAsync();\r\n            if (response instanceof Error) {\r\n                let message: string | undefined = undefined;\r\n                if (response instanceof WaterkotteError) {\r\n                    message = `${response.code} - ${response.message}`;\r\n                }\r\n\r\n                this.log.error(`Unhandled error on adapter startup: ${(message ??= String(response))}`);\r\n                this.log.error(`Callstack: ${response.stack}`);\r\n                await this.setMessageStateAsync(message);\r\n                return;\r\n            }\r\n\r\n            this.log.info('Successfully logged in');\r\n            await this.setStateAsync('info.connection', true, true);\r\n            await this.setMessageStateAsync('');\r\n\r\n            const interval = this.setInterval(\r\n                async () => await this.updateParametersAsync(),\r\n                this.config.pollingInterval,\r\n            );\r\n\r\n            if (interval) {\r\n                this.updateParametersInterval = interval;\r\n            }\r\n        } catch (e: unknown) {\r\n            this.log.error(`Unhandled error on adapter startup: ${e}`);\r\n            if (e instanceof Error) {\r\n                this.log.error(`Callstack: ${e.stack}`);\r\n            }\r\n            await this.setMessageStateAsync(`Unhandled error on adapter startup: ${String(e)}`);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private async checkConfig(): Promise<boolean> {\r\n        let configName: string = '';\r\n\r\n        if (!this.config.ipAddress) {\r\n            configName = 'ip address';\r\n        } else if (!this.config.username) {\r\n            configName = 'username';\r\n        } else if (!this.config.password) {\r\n            configName = 'password';\r\n        }\r\n\r\n        if (!configName) {\r\n            return true;\r\n        }\r\n\r\n        const message = `Unable to connect to heat pump: missing ${configName}`;\r\n        this.log.warn(message);\r\n        await this.setMessageStateAsync(message);\r\n        return false;\r\n    }\r\n\r\n    private async updateAndHandleConfigAsync(): Promise<boolean> {\r\n        if (!(await this.checkConfig())) {\r\n            return false;\r\n        }\r\n\r\n        const info = await this.getObjectAsync('info');\r\n        const lastConfig: ioBroker.AdapterConfig = <ioBroker.AdapterConfig>info?.native;\r\n\r\n        if (lastConfig) {\r\n            if (\r\n                lastConfig.pathFlavor != this.config.pathFlavor ||\r\n                lastConfig.removeWhitespace != this.config.removeWhitespace\r\n            ) {\r\n                await this.deleteAllObjectsAsync();\r\n            }\r\n        }\r\n\r\n        await this.extendObjectAsync('info', { native: this.config });\r\n        return true;\r\n    }\r\n\r\n    private async deleteAllObjectsAsync(): Promise<void> {\r\n        const objects = await this.getObjectListAsync({\r\n            startkey: this.namespace,\r\n        });\r\n\r\n        if (objects.rows) {\r\n            const infoObjectId = `${this.namespace}.info`;\r\n            for (const obj of objects.rows.filter(\r\n                (x) => x.id.startsWith(this.namespace) && !x.id.replace(this.namespace + '.', '').includes('.'),\r\n            )) {\r\n                if (obj.id.startsWith(infoObjectId)) {\r\n                    this.log.info('delete ' + obj.id);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    private async updateParametersAsync(): Promise<void | Error> {\r\n        if (!this.api) {\r\n            throw new AdapterError('Unable to update parameters because api has not been initialized');\r\n        }\r\n\r\n        try {\r\n            const tagResponses = await this.api.requestTagsAsync();\r\n\r\n            for (const tagResponse of tagResponses) {\r\n                if (tagResponse.response.status != TagResponse.STATUS_OK) {\r\n                    this.log.warn(\r\n                        `Unable to get parameter '${tagResponse.response.name}'. Received '${tagResponse.response.status}' instead.`,\r\n                    );\r\n                    continue;\r\n                }\r\n\r\n                if (!tagResponse.state) {\r\n                    continue;\r\n                }\r\n\r\n                let id = tagResponse.state.getPath(this.config.pathFlavor, this.FORBIDDEN_CHARS, this.language ?? 'en');\r\n                if (this.config.removeWhitespace) {\r\n                    id = id.replaceAll(/\\s/g, '_');\r\n                }\r\n                id = id.trimEnd('.');\r\n\r\n                await this.createObjectIfNotExists(\r\n                    id,\r\n                    {\r\n                        type: 'state',\r\n                        common: tagResponse.state.getCommonObject(),\r\n                        native: {\r\n                            id: tagResponse.state.Id,\r\n                        },\r\n                    },\r\n                    tagResponse.state,\r\n                );\r\n\r\n                await this.setStateAsync(id, tagResponse.state.normalizeValue(tagResponse.response.value), true);\r\n            }\r\n\r\n            await this.setMessageStateAsync('');\r\n        } catch (e: unknown) {\r\n            let returnError: Error;\r\n\r\n            if (e instanceof Error) {\r\n                if (e instanceof WaterkotteError) {\r\n                    returnError = e;\r\n                } else {\r\n                    returnError = new RethrowError(e);\r\n                }\r\n            } else {\r\n                returnError = new AdapterError(`Error during update: '${e}'`);\r\n            }\r\n\r\n            this.log.warn(returnError.message);\r\n            await this.setMessageStateAsync(returnError.message);\r\n            return returnError;\r\n        }\r\n    }\r\n\r\n    private async setMessageStateAsync(message: string): Promise<void> {\r\n        await this.createObjectIfNotExists(\r\n            'info.message',\r\n            {\r\n                type: 'state',\r\n                common: {\r\n                    write: false,\r\n                    type: 'string',\r\n                },\r\n                native: {},\r\n            },\r\n            message,\r\n        );\r\n        await this.setStateAsync('info.message', message, true);\r\n    }\r\n\r\n    private async createObjectIfNotExists(id: string, objPart: ioBroker.PartialObject, item: any): Promise<void> {\r\n        if (!this.knownObjects[id]) {\r\n            await this.extendObjectAsync(id, objPart);\r\n            this.knownObjects[id] = item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            clearInterval(this.updateParametersInterval);\r\n            try {\r\n                this.api\r\n                    ?.disconnectAsync()\r\n                    .then(() => {\r\n                        this.log.info('Successfully logged out');\r\n                    })\r\n                    .finally();\r\n            } catch {} // fire and forget\r\n\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WaterkotteEasycon(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new WaterkotteEasycon())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
